import tkinter as tk
from tkinter import ttk
import random
import json
from gtts import gTTS
import os
import tempfile
import pygame
import time
import sys

class JapaneseWordsApp:
    def __init__(self, root):
        self.root = root
        self.root.title("–ò–∑—É—á–µ–Ω–∏–µ —è–ø–æ–Ω—Å–∫–∏—Ö —Å–ª–æ–≤")
        self.root.geometry("800x600")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        self.root.grid_rowconfigure(0, weight=1)
        self.root.grid_columnconfigure(0, weight=1)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è pygame –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞
        pygame.mixer.init()
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ JSON —Ñ–∞–π–ª—É
        if getattr(sys, 'frozen', False):
            # –ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–ø–∞–∫–æ–≤–∞–Ω–æ –≤ EXE
            application_path = sys._MEIPASS
        else:
            # –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω–æ –∫–∞–∫ Python —Å–∫—Ä–∏–ø—Ç
            application_path = os.path.dirname(os.path.abspath(__file__))
            
        json_path = os.path.join(application_path, 'japanese_words.json')
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞
        try:
            with open(json_path, 'r', encoding='utf-8') as f:
                self.words_data = json.load(f)
        except Exception as e:
            tk.messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            self.words_data = {}
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤
        self.temp_dir = tempfile.mkdtemp()
        
        # –§–ª–∞–≥ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        self.is_playing = False
        
        # –¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å —Å–ª–æ–≤–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ –∏–∑—É—á–µ–Ω–∏—è
        self.current_word_index = 0
        self.current_category = None
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∏–ª–µ–π
        self.create_styles()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()
        
    def create_styles(self):
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∏–ª–µ–π –¥–ª—è –≤–∏–¥–∂–µ—Ç–æ–≤
        style = ttk.Style()
        
        # –°—Ç–∏–ª—å –¥–ª—è –º–µ—Ç–æ–∫
        style.configure('Large.TLabel', font=('Arial', 32))
        style.configure('Medium.TLabel', font=('Arial', 24))
        style.configure('Normal.TLabel', font=('Arial', 16))
        
        # –°—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–æ–∫
        style.configure('Large.TButton', font=('Arial', 14))
        
        # –°—Ç–∏–ª—å –¥–ª—è –∫–æ–º–±–æ–±–æ–∫—Å–∞
        style.configure('Large.TCombobox', font=('Arial', 14))
        
    def create_widgets(self):
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.root, padding="20")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è main_frame
        for i in range(9):  # 9 —Å—Ç—Ä–æ–∫ –≤ main_frame
            main_frame.grid_rowconfigure(i, weight=1)
        main_frame.grid_columnconfigure(1, weight=1)
        
        # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        ttk.Label(main_frame, text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", style='Normal.TLabel').grid(row=0, column=0, pady=20, padx=10, sticky='w')
        self.category_var = tk.StringVar()
        self.category_combo = ttk.Combobox(main_frame, textvariable=self.category_var, values=list(self.words_data.keys()), style='Large.TCombobox', width=40)
        self.category_combo.grid(row=0, column=1, pady=20, padx=10, sticky='ew')
        self.category_combo.bind('<<ComboboxSelected>>', self.on_category_select)
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–∞
        mode_frame = ttk.Frame(main_frame)
        mode_frame.grid(row=1, column=0, columnspan=2, pady=10)
        self.mode_var = tk.StringVar(value="study")
        ttk.Radiobutton(mode_frame, text="–†–µ–∂–∏–º –∏–∑—É—á–µ–Ω–∏—è", variable=self.mode_var, value="study", command=self.change_mode, style='Normal.TLabel').grid(row=0, column=0, padx=20)
        ttk.Radiobutton(mode_frame, text="–†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", variable=self.mode_var, value="test", command=self.change_mode, style='Normal.TLabel').grid(row=0, column=1, padx=20)
        
        # –ú–µ—Ç–∫–∞ —Å —è–ø–æ–Ω—Å–∫–∏–º —Å–ª–æ–≤–æ–º
        self.japanese_label = ttk.Label(main_frame, text="", style='Large.TLabel')
        self.japanese_label.grid(row=2, column=0, columnspan=2, pady=20)
        
        # –ú–µ—Ç–∫–∞ —Å —Ä–æ–º–∞–¥–∑–∏
        self.romaji_label = ttk.Label(main_frame, text="", style='Medium.TLabel')
        self.romaji_label.grid(row=3, column=0, columnspan=2, pady=10)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–∑–≤—É—á–∫–∏
        self.sound_button = ttk.Button(main_frame, text="üîä", command=self.play_sound, style='Large.TButton')
        self.sound_button.grid(row=4, column=0, columnspan=2, pady=10)
        
        # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞
        self.answer_frame = ttk.Frame(main_frame)
        self.answer_frame.grid(row=5, column=0, columnspan=2, pady=20)
        ttk.Label(self.answer_frame, text="–í–∞—à –æ—Ç–≤–µ—Ç:", style='Normal.TLabel').grid(row=0, column=0, padx=10)
        self.answer_entry = ttk.Entry(self.answer_frame, width=40, font=('Arial', 14))
        self.answer_entry.grid(row=0, column=1, padx=10)
        self.answer_entry.bind('<Return>', self.check_answer)
        
        # –ú–µ—Ç–∫–∞ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º
        self.translation_label = ttk.Label(main_frame, text="", style='Medium.TLabel', wraplength=600)
        self.translation_label.grid(row=6, column=0, columnspan=2, pady=20)
        
        # –ö–Ω–æ–ø–∫–∏
        self.buttons_frame = ttk.Frame(main_frame)
        self.buttons_frame.grid(row=7, column=0, columnspan=2, pady=20)
        
        self.show_button = ttk.Button(self.buttons_frame, text="–ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥", command=self.show_translation, style='Large.TButton')
        self.show_button.grid(row=0, column=0, padx=10)
        
        self.next_button = ttk.Button(self.buttons_frame, text="–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ", command=self.show_next_word, style='Large.TButton')
        self.next_button.grid(row=0, column=1, padx=10)
        
        self.check_button = ttk.Button(self.buttons_frame, text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", command=lambda: self.check_answer(None), style='Large.TButton')
        self.check_button.grid(row=0, column=2, padx=10)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats_label = ttk.Label(main_frame, text="", style='Normal.TLabel')
        self.stats_label.grid(row=8, column=0, columnspan=2, pady=20)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.correct_answers = 0
        self.total_questions = 0
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞
        self.change_mode()
        
    def play_sound(self):
        if hasattr(self, 'current_word') and not self.is_playing:
            self.is_playing = True
            self.sound_button.config(state='disabled')  # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ –≤—Ä–µ–º—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            
            try:
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∞—É–¥–∏–æ
                temp_file = os.path.join(self.temp_dir, 'temp.mp3')
                
                # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º –µ–≥–æ
                if os.path.exists(temp_file):
                    pygame.mixer.music.stop()
                    pygame.mixer.music.unload()
                    os.remove(temp_file)
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª
                tts = gTTS(text=self.current_word[1]['romaji'], lang='ja')
                tts.save(temp_file)
                
                # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫
                pygame.mixer.music.load(temp_file)
                pygame.mixer.music.play()
                
                # –ñ–¥–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
                self.root.after(100, self.check_sound_finished)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {e}")
                self.is_playing = False
                self.sound_button.config(state='normal')
    
    def check_sound_finished(self):
        if pygame.mixer.music.get_busy():
            self.root.after(100, self.check_sound_finished)
        else:
            pygame.mixer.music.unload()
            self.is_playing = False
            self.sound_button.config(state='normal')  # –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –æ–±—Ä–∞—Ç–Ω–æ
        
    def change_mode(self):
        mode = self.mode_var.get()
        if mode == "study":
            self.answer_frame.grid_remove()
            self.check_button.grid_remove()
            self.show_button.grid_remove()  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∫–∞–∑–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Ä–µ–∂–∏–º–µ –∏–∑—É—á–µ–Ω–∏—è
            self.translation_label.grid()
            self.stats_label.config(text="")
            self.correct_answers = 0
            self.total_questions = 0
        else:
            self.answer_frame.grid()
            self.check_button.grid()
            self.show_button.grid_remove()
            self.translation_label.grid_remove()
        self.show_next_word()
        
    def on_category_select(self, event):
        self.show_next_word()
        
    def show_next_word(self):
        if not self.words_data:
            return
            
        if self.mode_var.get() == "study":
            # –í —Ä–µ–∂–∏–º–µ –∏–∑—É—á–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–æ–≤–∞ –ø–æ –ø–æ—Ä—è–¥–∫—É
            self.current_category = self.category_var.get()
            if not self.current_category:
                return
                
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category_words = self.words_data[self.current_category]
            if not category_words:
                return
                
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –≤ —Å–ø–∏—Å–æ–∫ –ø–∞—Ä (—è–ø–æ–Ω—Å–∫–æ–µ —Å–ª–æ–≤–æ, –¥–∞–Ω–Ω—ã–µ)
            words_list = list(category_words.items())
            
            if self.current_word_index >= len(words_list):
                self.current_word_index = 0
            
            japanese_word, word_data = words_list[self.current_word_index]
            self.current_word = (japanese_word, word_data)
            self.current_word_index += 1
            
            self.japanese_label.config(text=japanese_word)
            self.romaji_label.config(text=word_data['romaji'])
            if self.mode_var.get() == "study":
                self.translation_label.config(text=word_data['russian'])
            else:
                self.translation_label.config(text="")
        else:
            # –í —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä
            self.current_category = self.category_var.get()
            if not self.current_category:
                return
                
            category_words = self.words_data[self.current_category]
            if not category_words:
                return
                
            japanese_word = random.choice(list(category_words.keys()))
            self.current_word = (japanese_word, category_words[japanese_word])
            
            self.japanese_label.config(text=japanese_word)
            self.romaji_label.config(text=category_words[japanese_word]['romaji'])
            self.translation_label.config(text="")
            
        self.answer_entry.delete(0, tk.END)
        self.answer_entry.focus()
        
    def show_translation(self):
        if hasattr(self, 'current_word'):
            self.translation_label.config(text=self.current_word[1]['russian'])
        
    def check_answer(self, event):
        if not hasattr(self, 'current_word'):
            return
            
        user_answer = self.answer_entry.get().strip().lower()
        correct_russian = self.current_word[1]['russian'].lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥
        if user_answer == correct_russian:
            self.correct_answers += 1
            self.translation_label.config(
                text=f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n–Ø–ø–æ–Ω—Å–∫–∏–π: {self.current_word[0]}\n–†–æ–º–∞–¥–∑–∏: {self.current_word[1]['romaji']}\n–ü–µ—Ä–µ–≤–æ–¥: {self.current_word[1]['russian']}", 
                foreground="green"
            )
        else:
            self.translation_label.config(
                text=f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {self.current_word[1]['russian']}\n–†–æ–º–∞–¥–∑–∏: {self.current_word[1]['romaji']}", 
                foreground="red"
            )
            
        self.total_questions += 1
        self.update_stats()
        
    def update_stats(self):
        stats_text = f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {self.correct_answers} –∏–∑ {self.total_questions}"
        if self.total_questions > 0:
            percentage = (self.correct_answers / self.total_questions) * 100
            stats_text += f" ({percentage:.1f}%)"
        self.stats_label.config(text=stats_text)
        
    def __del__(self):
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        pygame.mixer.quit()
        import shutil
        try:
            shutil.rmtree(self.temp_dir)
        except:
            pass

if __name__ == "__main__":
    root = tk.Tk()
    app = JapaneseWordsApp(root)
    root.mainloop() 